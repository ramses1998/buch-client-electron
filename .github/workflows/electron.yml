name: CI für die Electron/Next.js-Anwendung

# Der Name des GitHub-Ereignisses, das den Workflow auslöst. Hier wird der Worflow bei Pushs in jeder Branch ausgelöst.
# Siehe: https://help.github.com/en/github/automating-your-workflow-with-github-actions/events-that-trigger-workflows
on: [push]

# Ein Workflow-Lauf besteht aus einem oder mehreren Jobs (Aufträgen). Die Jobs laufen standardmäßig parallel.
jobs:
  build-on-windows:
    # Der Typ des Rechners, auf dem der Auftrag ausgeführt werden soll.
    # Der Rechner kann entweder ein von GitHub gehosteter Runner oder ein selbst gehosteter Runner sein.
    runs-on: windows-latest
    # Ein Job enthält eine Abfolge von Aufgaben, die Steps genannt werden. Steps können Befehle ausführen,
    # Einrichtungsaufgaben ausführen oder eine Aktion im Repository, einem öffentlichen Repository oder einer in
    # einer Docker-Registry veröffentlichten Aktion ausführen. Nicht alle Steps führen Aktionen aus, aber alle
    # Aktionen werden als ein Step ausgeführt. Jeder Step wird in seinem eigenen Prozess in der virtuellen
    # Umgebung ausgeführt und hat Zugriff auf den Workspace und das Dateisystem. Da Steps in ihrem eigenen
    # Prozess ausgeführt werden, bleiben Änderungen an Umgebungsvariablen zwischen den Schritten nicht erhalten.
    # Siehe: https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idsteps
    steps:
      - name: Checkout
        # Wählt eine Aktion aus, die als Teil eines Steps im Job ausgeführt werden soll. Eine Aktion ist
        # eine wiederverwendbare Einheit von Code.
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if (Test-Path -Path $Env:GITHUB_WORKSPACE\package.json) {
            # Append output to GITHUB_OUTPUT variable, assuming it's already set
            $GITHUB_OUTPUT += "manager=npm"
            $GITHUB_OUTPUT += "command=ci"
            $GITHUB_OUTPUT += "runner=npx --no-install"
            Exit 0
          } else {
            Write-Host "Unable to determine package manager"
            Exit 1
          }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install Next globally
        run: |
          npm -g install next

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Checking errors with ESLint
        run: |
          npm run lint

      - name: Build
        run: |
          npm run build

      - name: Checking that build runs (Running server as background task)
        run: |
          npm run start &

      - name: Checking that build runs (Running server as background task)
        run: |
          npm run start &

#  build-on-windows:
#    runs-on: windows-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Build
#        run: |
#          next build && electron-builder --windows --x64
#
#  build-on-macos:
#    runs-on: macos-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Build
#        run: |
#          next build && electron-builder --macos --x64